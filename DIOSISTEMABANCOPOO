from abc import ABC, abstractclassmethod, abstractproperty


class Cliente:

    def __init__(self,endereco):
        self.endereco = endereco
        self.contas =[]
    def realizar_transacao(self, conta, transacao):
        transacao.registrar (conta)

        def adicionar_conta (self,conta):
            self.contas.append (conta)

class PessoaFisica (Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf

class Conta:
    def __init__(self,numero,cliente):
        self._saldo = 10000
        self._numero = numero
        self._agencia = '0001'
        self.historico = Historico()

    @classmethod
    def nova_conta (cls, cliente, numero):
        return cls(numero,cliente)

    @property
    def saldo (self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia (self):
        return self._agencia

    @property
    def cliente (self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(*, saldo, valor, extrato, limite, numero_saques, limite_saques):
        excedeu_saldo = valor > saldo
        excedeu_limite = valor > limite
        excedeu_saques = numero_saques >= limite_saques

        if excedeu_saldo:
            print("\n@@@ Operação falhou! Você não tem saldo suficiente. @@@")


        elif excedeu_limite:
            print("\n@@@ Operação falhou! O valor do saque excede o limite. @@@")

        elif excedeu_saques:
            print("\n@@@ Operação falhou! Número máximo de saques excedido. @@@")



        else valor > 0:
            saldo -= valor
            extrato += f"Saque:\t\tR$ {valor:.2f}\n"
            numero_saques += 1
            print("\n=== Saque realizado com sucesso! ===")

        return True

class ContaCorrente(Conta):
        def __init__(self, numero, cliente, limite=1000, limite_saques=5):
            super().__init__(numero,cliente)
            self.limite = limite
            self.limite_saques = limite_saques

        def sacar (self, valor):
            numero_saques = len (
                [transacao for transacao in self.historico.transacoes if transacao ['tipo'] == Saque.
                 __name__]
            )

            excedeu_limite = valor > self.limite
            excedeu_saques = numero_saques >= self.limite_saques

            if excedeu_limite:
                print('Operação falhou! O valor excede o limite!')

            elif excedeu_saques:
                print ('Operação falhou! Numero máximo de saques excedido!')

            else:
                return super ().sacar(valor)

            return False

        def __str__(self):
            return f''''''''
            Agencia: {self.agencia}
            Conta_Corrente: {self.numero}
            Titular: {self.cliente.nome}
            ''''''''

class Historico:
    def __init__(self):
        self.transacoes = []

@property
def transacoes (self):
    return self._transacoes

def adicionar_transacao (self, transacao):
        self._transacoes.append( {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor}
        )

class Transacao (ABC):
    @property
    @abstractproperty
    def valor (self):
        pass

    @abstractclassmethod
    def registrar(self, conta):
        pass

class Saque (Transacao):
    def __init__ (self,valor):
        self._valor = valor

    @property
    def valor (self):
        return self._valor

    def registrar (self,conta):
        sucesso_transacao = conta.sacar (self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

class Deposito(Transacao):
    def __init__ (self,valor):
        self._valor = valor

    @property
    def valor (self):
        return self._valor

    def registrar (self,conta):
        sucesso_transacao = conta.depositar (self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)
